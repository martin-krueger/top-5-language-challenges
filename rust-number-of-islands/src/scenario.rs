pub struct Scenario {
    pub name: String,
    pub map: Vec<Vec<char>>,
    pub island_map: Vec<Vec<i32>>,
    pub islands: u32,
}

impl Scenario {
    pub(crate) fn print_map(&self) {
        for row in self.map.iter() {
            for value in row.iter() {
                if *value == '0' {
                    print!("{}", '□')
                } else if *value == '1' {
                    print!("{}", '■')
                } else {
                    print!("?")
                }
                print!(" ")
            }

            println!()
        }
    }
}

pub(crate) fn scenario_1() -> Scenario {
    Scenario {
        name: String::from("Map with only water"),
        map: vec![vec!['0'; 4]; 4],
        island_map: vec![vec![0; 4]; 4],
        islands: 0,
    }
}

pub(crate) fn scenario_2() -> Scenario {
    Scenario {
        name: String::from("Map with only land"),
        map: vec![vec!['1'; 4]; 4],
        island_map: vec![vec![1; 4]; 4],
        islands: 1,
    }
}

pub(crate) fn scenario_3() -> Scenario {
    let mut map = vec![vec!['0'; 5]; 4];
    map[0] = vec!['1', '1', '0', '0', '0'];
    map[1] = vec!['1', '1', '0', '0', '0'];
    map[2] = vec!['0', '0', '1', '0', '0'];
    map[3] = vec!['0', '0', '0', '1', '1'];

    let mut island_map = vec![vec![0i32; 5]; 4];
    island_map[0] = vec![1, 1, 0, 0, 0];
    island_map[1] = vec![1, 1, 0, 0, 0];
    island_map[2] = vec![0, 0, 2, 0, 0];
    island_map[3] = vec![0, 0, 0, 3, 3];

    Scenario {
        name: String::from("Map with diagonal unconnected island"),
        map,
        island_map,
        islands: 3,
    }
}

pub(crate) fn scenario_4() -> Scenario {
    let mut map = vec![vec!['0'; 3]; 3];
    map[0] = vec!['1', '1', '1'];
    map[1] = vec!['0', '1', '0'];
    map[2] = vec!['1', '1', '1'];

    let mut island_map = vec![vec![0i32; 3]; 3];
    island_map[0] = vec![1, 1, 1];
    island_map[1] = vec![0, 1, 0];
    island_map[2] = vec![1, 1, 1];

    Scenario {
        name: String::from("Map with one island connected by middle row"),
        map,
        island_map,
        islands: 1,
    }
}

pub(crate) fn scenario_5() -> Scenario {
    let mut map = vec![vec!['0'; 7]; 7];
    map[0] = vec!['1', '1', '1', '1', '1', '1', '1'];
    map[1] = vec!['0', '0', '0', '0', '0', '0', '1'];
    map[2] = vec!['1', '1', '1', '1', '1', '0', '1'];
    map[3] = vec!['1', '0', '0', '0', '1', '0', '1'];
    map[4] = vec!['1', '0', '1', '0', '1', '0', '1'];
    map[5] = vec!['1', '0', '1', '1', '1', '0', '1'];
    map[6] = vec!['1', '1', '1', '1', '1', '1', '1'];

    let mut island_map = vec![vec![0i32; 7]; 7];
    island_map[0] = vec![1, 1, 1, 1, 1, 1, 1];
    island_map[1] = vec![0, 0, 0, 0, 0, 0, 1];
    island_map[2] = vec![1, 1, 1, 1, 1, 0, 1];
    island_map[3] = vec![1, 0, 0, 0, 1, 0, 1];
    island_map[4] = vec![1, 0, 1, 0, 1, 0, 1];
    island_map[5] = vec![1, 0, 1, 1, 1, 0, 1];
    island_map[6] = vec![1, 1, 1, 1, 1, 1, 1];

    Scenario { name: String::from("Medium sized map"), map, island_map, islands: 1 }
}

pub(crate) fn scenario_6() -> Scenario {
    let mut map = vec![vec!['0'; 20]; 20];
    map[00] = vec!['1', '1', '1', '1', '0', '1', '1', '1', '1', '1', '1', '1', '0', '1', '0', '1', '1', '1', '1', '1'];
    map[01] = vec!['1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '0', '1', '1', '1', '1', '1', '1', '1', '1'];
    map[02] = vec!['0', '1', '0', '1', '1', '1', '0', '1', '1', '0', '1', '1', '1', '1', '1', '1', '1', '1', '0', '1'];
    map[03] = vec!['1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '0', '1'];
    map[04] = vec!['1', '1', '1', '1', '0', '1', '1', '1', '1', '1', '1', '1', '1', '0', '1', '1', '1', '1', '0', '1'];
    map[05] = vec!['1', '1', '1', '1', '1', '0', '1', '1', '1', '0', '1', '1', '1', '1', '1', '1', '1', '1', '0', '1'];
    map[06] = vec!['1', '1', '1', '1', '0', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '0', '1', '1', '1', '1'];
    map[07] = vec!['1', '1', '1', '1', '1', '1', '1', '1', '1', '0', '0', '1', '0', '1', '0', '1', '1', '1', '1', '1'];
    map[08] = vec!['1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1'];
    map[09] = vec!['1', '1', '1', '1', '0', '0', '0', '1', '0', '1', '1', '1', '1', '0', '1', '0', '1', '1', '1', '1'];
    map[10] = vec!['1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1'];
    map[11] = vec!['1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '0', '1', '1', '1', '1', '0', '0', '1', '1'];
    map[12] = vec!['0', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '0', '1', '1', '1', '1', '1', '1', '1', '1'];
    map[13] = vec!['1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '0', '1', '1', '1', '1', '1', '1', '1', '1', '1'];
    map[14] = vec!['1', '1', '1', '1', '1', '0', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1'];
    map[15] = vec!['1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '0', '1', '1', '1', '1', '0', '1', '1'];
    map[16] = vec!['1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1'];
    map[17] = vec!['1', '0', '1', '1', '1', '0', '1', '1', '1', '1', '0', '1', '1', '1', '1', '1', '1', '1', '1', '1'];
    map[18] = vec!['1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1'];
    map[19] = vec!['1', '1', '0', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1'];

    let mut island_map = vec![vec![0i32; 20]; 20];
    island_map[00] = vec![1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1];
    island_map[01] = vec![1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1];
    island_map[02] = vec![0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1];
    island_map[03] = vec![1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1];
    island_map[04] = vec![1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1];
    island_map[05] = vec![1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1];
    island_map[06] = vec![1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1];
    island_map[07] = vec![1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 1, 1];
    island_map[08] = vec![1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1];
    island_map[09] = vec![1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1];
    island_map[10] = vec![1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1];
    island_map[11] = vec![1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1];
    island_map[12] = vec![0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1];
    island_map[13] = vec![1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1];
    island_map[14] = vec![1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1];
    island_map[15] = vec![1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1];
    island_map[16] = vec![1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1];
    island_map[17] = vec![1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1];
    island_map[18] = vec![1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1];
    island_map[19] = vec![1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1];

    Scenario { name: String::from("Big map"), map, island_map, islands: 1 }
}

pub(crate) fn scenario_7() -> Scenario {
    let mut map = vec![vec!['0'; 7]; 7];
    map[0] = vec!['1', '1', '1', '0', '1', '1', '1'];
    map[1] = vec!['0', '0', '0', '0', '0', '0', '1'];
    map[2] = vec!['1', '1', '1', '1', '1', '0', '1'];
    map[3] = vec!['1', '0', '0', '0', '1', '0', '0'];
    map[4] = vec!['1', '0', '1', '0', '1', '0', '1'];
    map[5] = vec!['1', '0', '1', '0', '1', '0', '1'];
    map[6] = vec!['1', '0', '1', '0', '0', '1', '1'];

    let mut island_map = vec![vec![0i32; 7]; 7];
    island_map[0] = vec![1, 1, 1, 0, 2, 2, 2];
    island_map[1] = vec![0, 0, 0, 0, 0, 0, 2];
    island_map[2] = vec![3, 3, 3, 3, 3, 0, 2];
    island_map[3] = vec![3, 0, 0, 0, 3, 0, 0];
    island_map[4] = vec![3, 0, 4, 0, 3, 0, 5];
    island_map[5] = vec![3, 0, 4, 0, 3, 0, 5];
    island_map[6] = vec![3, 0, 4, 0, 0, 5, 5];

    Scenario { name: String::from("Many islands"), map, island_map, islands: 5 }
}